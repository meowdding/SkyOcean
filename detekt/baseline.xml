<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>AbstractClassCanBeInterface:Recipe.kt:Recipe$Recipe</ID>
    <ID>AlsoCouldBeApply:ItemSelectorOverlay.kt:ItemSelectorOverlay$also</ID>
    <ID>BackingPropertyNaming:DeferredLayout.kt:DeferredLayout$protected abstract val _backing: Type</ID>
    <ID>BlankLineBetweenWhenConditions:AreaWalls.kt:AreaWalls$when (blockPosition) { in Area.NUCLEUS -&gt; renderNucleus() in Area.MAGMA_FIELDS -&gt; renderMagmaFields() in Area.MITHRIL -&gt; { renderOutsideShape(Area.NUCLEUS, Direction.NORTH) renderOutsideShape(Area.NUCLEUS, Direction.EAST) renderOutsideShape(Area.PRECURSOR, Direction.NORTH) renderOutsideShape(Area.JUNGLE, Direction.EAST) renderMagmaFieldsTop() } in Area.GOBLIN -&gt; { renderOutsideShape(Area.NUCLEUS, Direction.WEST) renderOutsideShape(Area.NUCLEUS, Direction.SOUTH) renderOutsideShape(Area.PRECURSOR, Direction.WEST) renderOutsideShape(Area.JUNGLE, Direction.SOUTH) renderMagmaFieldsTop() } in Area.PRECURSOR -&gt; { renderOutsideShape(Area.NUCLEUS, Direction.SOUTH) renderOutsideShape(Area.NUCLEUS, Direction.EAST) renderOutsideShape(Area.MITHRIL, Direction.SOUTH) renderOutsideShape(Area.GOBLIN, Direction.EAST) renderMagmaFieldsTop() } in Area.JUNGLE -&gt; { renderOutsideShape(Area.NUCLEUS, Direction.WEST) renderOutsideShape(Area.NUCLEUS, Direction.NORTH) renderOutsideShape(Area.MITHRIL, Direction.WEST) renderOutsideShape(Area.GOBLIN, Direction.NORTH) renderMagmaFieldsTop() } }</ID>
    <ID>BlankLineBetweenWhenConditions:CraftHelperStorage.kt:CraftHelperStorage$when (version) { 0 -&gt; SkyOceanCodecs.NormalCraftHelperRecipeCodec.codec().xmap( { (item, amount) -&gt; NormalCraftHelperRecipe( item?.id?.let { SkyBlockId.unknownType(it) }, amount, ) }, { it }, ).xmap({ it as CraftHelperRecipe }, { it as NormalCraftHelperRecipe }) 1 -&gt; SkyOceanCodecs.NormalCraftHelperRecipeCodec.codec().xmap({ it as CraftHelperRecipe }, { it as NormalCraftHelperRecipe }) 2 -&gt; SkyOceanCodecs.CraftHelperRecipeCodec.codec() else -&gt; Codec.unit { NormalCraftHelperRecipe(null, 1) } }</ID>
    <ID>BlankLineBetweenWhenConditions:CustomItems.kt:CustomItems$when { this.getTag("skyocean:customization_item") != null -&gt; UuidKey(Uuid.fromLongs(0, 0).toJavaUuid()) this.getTag("skyocean:static_item") != null -&gt; UuidKey( this.getTag("skyocean:static_item")!!.asString().map { UUID.fromString(it) }.orElseGet { UUID.randomUUID() }, ) this[DataTypes.UUID] != null -&gt; UuidKey(this[DataTypes.UUID]!!) this[DataTypes.TIMESTAMP] != null &amp;&amp; this.getSkyBlockId() != null -&gt; IdAndTimeKey( this.getSkyBlockId()!!, this[DataTypes.TIMESTAMP]!!.toEpochMilliseconds(), ) this.getSkyBlockId() != null -&gt; IdKey(this.getSkyBlockId()!!) else -&gt; null }</ID>
    <ID>BlankLineBetweenWhenConditions:DungeonGambling.kt:DungeonGambling$when (event.item) { in Items.BARRIER -&gt; DungeonAPI.dungeonFloor ?: return in Items.ARROW -&gt; if (DungeonsConfig.gamblingInCroesus) { event.item.getRawLore().firstOrNull { it.startsWith("To ") }?.let { line -&gt; CroesusImpl.croesusLoreToFloor[line.substring(3)] } ?: return } else return else -&gt; return }</ID>
    <ID>BlankLineBetweenWhenConditions:DungeonGamblingFakeScreen.kt:DungeonGamblingFakeScreen$when (keyEvent.key) { InputConstants.KEY_R -&gt; { setup() true } else -&gt; super.keyPressed(keyEvent) }</ID>
    <ID>BlankLineBetweenWhenConditions:FishingCatchApi.kt:FishingCatchApi$when (event.sound) { SoundEvents.PLAYER_SPLASH -&gt; { if (event.volume != 0.25f) return val lastHook = lastHookPos ?: return if (lastHook.distanceToSqr(event.pos) &gt; DISTANCE_SQR) return lastCatchSound = currentInstant() handleBobber() } SoundEvents.NOTE_BLOCK_PLING.value() -&gt; { if (event.pitch != 1f || event.volume != 1f) return if (McPlayer.distanceSqr(event.pos) &gt; DISTANCE_SQR) return lastPlingSound = currentInstant() handleBobber() } }</ID>
    <ID>BlankLineBetweenWhenConditions:ItemCustomizationModal.kt:ItemCustomizationModal$when (color) { is StaticItemColor -&gt; ExtraDisplays.passthrough(20, 22) { fill(2, 2, 18, 18, ARGB.opaque(color.getColor())) } is SkyBlockDye -&gt; Displays.item(SkyBlockId.item(color.id).toItem()).withPadding(2, bottom = 4) is AnimatedSkyBlockDye -&gt; Displays.item(SkyBlockId.item(color.id).toItem()).withPadding(2, bottom = 4) else -&gt; Displays.empty(20, 22) }</ID>
    <ID>BlankLineBetweenWhenConditions:ItemModifier.kt:ItemModifiers$when (Config.modifyIndicator) { SkyOceanModifyIndicator.PREFIX -&gt; this.tooltip.addFirst(Text.join(ChatUtils.ICON_SPACE_COMPONENT, this.tooltip.removeFirst())) SkyOceanModifyIndicator.SUFFIX -&gt; this.tooltip.addFirst(Text.join(this.tooltip.removeFirst(), ChatUtils.SPACE_ICON_COMPONENT)) SkyOceanModifyIndicator.LORE -&gt; { this.tooltip.add(1, Text.of("Modified by SkyOcean").withColor(TextColor.DARK_GRAY)) this.tooltip.add(2, CommonComponents.EMPTY) } SkyOceanModifyIndicator.NOTHING -&gt; {} }</ID>
    <ID>BlankLineBetweenWhenConditions:ItemModifier.kt:ItemModifiers$when (key) { DataMarker.ITEM -&gt; item = value.unsafeCast() DataMarker.BACKGROUND_ITEM -&gt; backgroundItem = value.unsafeCast() DataMarker.ITEM_COUNT -&gt; count = 2 is DataMarker.ComponentDataMarker -&gt; { set(key.component, value.unsafeCast()) } else -&gt; {} }</ID>
    <ID>BlankLineBetweenWhenConditions:MineshaftAnnouncement.kt:MineshaftAnnouncement$when (MineshaftConfig.shaftAnnounceType) { ShaftAnnounceType.CHAT -&gt; ChatUtils.chat(text) ShaftAnnounceType.PARTY -&gt; { if (PartyAPI.inParty) { ChatUtils.chat("Sending message into party chat...") McClient.sendCommand("/pc ${text.stripped}") } else ChatUtils.chat(text) } }</ID>
    <ID>BlankLineBetweenWhenConditions:MuseumDonationHelper.kt:MuseumDonationHelper$when (this[DataTypes.CATEGORY]?.name?.lowercase()) { "helmet" -&gt; 1 "chestplate" -&gt; 2 "leggings" -&gt; 3 "boots" -&gt; 4 "necklace" -&gt; 5 "cloak" -&gt; 6 "belt" -&gt; 7 "bracelet", "gloves" -&gt; 8 else -&gt; { logger.info("Unknown category ${this[DataTypes.CATEGORY]?.name?.lowercase()}") Int.MAX_VALUE } }</ID>
    <ID>BlankLineBetweenWhenConditions:TrackedItemBundle.kt:BundledItemContext$when { newContext is ChestItemContext -&gt; chests.add(newContext.chestPos) newContext is EquipmentItemContext &amp;&amp; !any&lt;EquipmentItemContext&gt;() -&gt; contexts.add(EquipmentItemContext) newContext is InventoryItemContext &amp;&amp; !any&lt;InventoryItemContext&gt;() -&gt; contexts.add(InventoryItemContext) newContext is AbstractStorageItemContext &amp;&amp; any&lt;StorageItemContext&gt;() -&gt; {} // skip newContext is AbstractStorageItemContext -&gt; { val other = contexts.filterIsInstance&lt;AbstractStorageItemContext&gt;().firstOrNull() // there should only ever be one entry per type val mergedContext: ItemContext = when { other == null -&gt; newContext newContext is BackpackStorageItemContext &amp;&amp; other is BackpackStorageItemContext -&gt; if (newContext.index == other.index) other else StorageItemContext newContext is EnderChestStorageItemContext &amp;&amp; other is EnderChestStorageItemContext -&gt; if (newContext.index == other.index) other else StorageItemContext else -&gt; StorageItemContext } other?.let(contexts::remove) contexts.add(mergedContext) } }</ID>
    <ID>BlankLineBetweenWhenConditions:TrackedItemBundle.kt:TrackedItemBundle$when { context is BundledItemContext -&gt; context.add(newItem) context is EnderChestStorageItemContext &amp;&amp; other is EnderChestStorageItemContext -&gt; { if (context.index == other.index) return this.context = StorageItemContext } context is BackpackStorageItemContext &amp;&amp; other is BackpackStorageItemContext -&gt; { if (context.index == other.index) return this.context = StorageItemContext } context is AbstractStorageItemContext &amp;&amp; other is AbstractStorageItemContext -&gt; { this.context = StorageItemContext } context is RiftInventoryContext &amp;&amp; other is RiftInventoryContext -&gt; {} context is RiftEnderchestPageContext &amp;&amp; other is RiftEnderchestPageContext -&gt; { if (context.index == other.index) return this.context = RiftStorageContext } context is AbstractRiftStorageContext &amp;&amp; other is AbstractRiftStorageContext -&gt; RiftStorageContext context is RiftItemContext &amp;&amp; other is RiftItemContext -&gt; RiftBundleContext context is InventoryItemContext &amp;&amp; other is InventoryItemContext -&gt; {} context is EquipmentItemContext &amp;&amp; other is EquipmentItemContext -&gt; {} context !is BundledItemContext -&gt; { this.context = BundledItemContext().apply { this@TrackedItemBundle.items.forEach(::add) } } else -&gt; { context.add(newItem) } }</ID>
    <ID>BlankLineBetweenWhenConditions:Utils.kt:Utils$when (Config.modifyIndicator) { SkyOceanModifyIndicator.PREFIX -&gt; this.namePrefix(ChatUtils.ICON_SPACE_COMPONENT) SkyOceanModifyIndicator.SUFFIX -&gt; this.nameSuffix(ChatUtils.SPACE_ICON_COMPONENT) SkyOceanModifyIndicator.LORE -&gt; this.alterTooltip { lines().add(0, Text.of("Modified by SkyOcean").withColor(TextColor.DARK_GRAY)) lines().add(1, CommonComponents.EMPTY) } SkyOceanModifyIndicator.NOTHING -&gt; {} }</ID>
    <ID>ClassOrdering:AccessoryBagItemSource.kt:AccessoryBagItemContext$override val source = ItemSources.ACCESSORY_BAG</ID>
    <ID>ClassOrdering:AccessoryBagItemSource.kt:AccessoryBagItemSource$override val type = ItemSources.ACCESSORY_BAG</ID>
    <ID>ClassOrdering:AnimationManager.kt:AnimationManager$Companion</ID>
    <ID>ClassOrdering:BlockTagKey.kt:BlockTagKey$override val key: TagKey&lt;Block&gt; = TagKey.create(Registries.BLOCK, SkyOcean.id(path))</ID>
    <ID>ClassOrdering:Buttons.kt:ButtonConfig$constructor(itemLike: ItemLike, command: String, @Language("RegExp") title: String, tooltip: String = "") : this(itemLike.id.toString(), command, title, tooltip)</ID>
    <ID>ClassOrdering:ChestItemSource.kt:ChestItemSource$override val type = ItemSources.CHEST</ID>
    <ID>ClassOrdering:ChestTracker.kt:ChestTracker$private val Slot.savableIndex get() = this.index % 27</ID>
    <ID>ClassOrdering:CodecHelpers.kt:CodecHelpers$fun &lt;T&gt; copyOnWriteList(original: Codec&lt;T&gt;): Codec&lt;CopyOnWriteArrayList&lt;T&gt;&gt;</ID>
    <ID>ClassOrdering:CodecHelpers.kt:CodecHelpers$internal inline fun &lt;reified K, reified V&gt; map(): Codec&lt;Map&lt;K, V&gt;&gt;</ID>
    <ID>ClassOrdering:CodecHelpers.kt:CodecHelpers$internal inline fun &lt;reified K, reified V&gt; mutableMap(): Codec&lt;MutableMap&lt;K, V&gt;&gt;</ID>
    <ID>ClassOrdering:CodecHelpers.kt:CodecHelpers$internal inline fun &lt;reified T&gt; list()</ID>
    <ID>ClassOrdering:CompoundPatch.kt:CompoundPatch$Companion</ID>
    <ID>ClassOrdering:CooldownHelper.kt:CooldownHelper$constructor(cooldown: Duration, onReady: () -&gt; Unit) : this({ cooldown }, onReady)</ID>
    <ID>ClassOrdering:CrystalHollowsBB.kt:CrystalHollowsBB$private fun create(pos1: Vec3i, pos2: Vec3i): BoundingBox</ID>
    <ID>ClassOrdering:DataStorage.kt:DataStorage$Companion</ID>
    <ID>ClassOrdering:DataStorage.kt:DataStorage$constructor(defaultData: () -&gt; T, fileName: String, codec: Codec&lt;T&gt;) : this(0, defaultData, fileName, { codec })</ID>
    <ID>ClassOrdering:DataStorage.kt:DataStorage$fun get(): T</ID>
    <ID>ClassOrdering:DataStorage.kt:DataStorage$fun save()</ID>
    <ID>ClassOrdering:DataStorage.kt:DataStorage.Companion$val defaultPath: Path = McClient.config.resolve("skyocean/data")</ID>
    <ID>ClassOrdering:DeferredLayout.kt:DeferredLayout$Companion</ID>
    <ID>ClassOrdering:DwarvenMinesBB.kt:DwarvenMinesBB$private fun create(pos1: Vec3i, pos2: Vec3i): BoundingBox</ID>
    <ID>ClassOrdering:EasingFunction.kt:EasingFunctions$private fun easeInN(power: Int)</ID>
    <ID>ClassOrdering:EasingFunction.kt:EasingFunctions$private fun easeInOutN(power: Int): EasingFunction</ID>
    <ID>ClassOrdering:EasingFunction.kt:EasingFunctions$private fun easeOutN(power: Int)</ID>
    <ID>ClassOrdering:ForgeItemSource.kt:ForgeItemSource$override val type = ItemSources.FORGE</ID>
    <ID>ClassOrdering:HexColorArgumentType.kt:HexColorArgumentType$Companion</ID>
    <ID>ClassOrdering:HotspotAPI.kt:HotspotType$val regex: Regex = Regex(regex)</ID>
    <ID>ClassOrdering:HuntingBoxItemSource.kt:HuntingBoxItemContext$override val source: ItemSources = ItemSources.HUNTING_BOX</ID>
    <ID>ClassOrdering:HuntingBoxItemSource.kt:HuntingBoxItemSource$override val type: ItemSources = ItemSources.HUNTING_BOX</ID>
    <ID>ClassOrdering:Ingredients.kt:CurrencyIngredient$override fun withAmount(amount: Int): Ingredient</ID>
    <ID>ClassOrdering:Ingredients.kt:IngredientType.Companion$@IncludedCodec val ITEM_LIKE: Codec&lt;ItemLikeIngredient&gt; = SkyOceanCodecs.IngredientCodec.codec().xmap({ it as ItemLikeIngredient }, { it })</ID>
    <ID>ClassOrdering:InventoryItemSource.kt:InventoryItemSource$override val type = ItemSources.INVENTORY</ID>
    <ID>ClassOrdering:ItemContext.kt:ItemContext$val source: ItemSources</ID>
    <ID>ClassOrdering:ItemCustomizationModal.kt:ItemCustomizationModal$override fun rebuildWidgets()</ID>
    <ID>ClassOrdering:ItemHighlighter.kt:ItemHighlighter$private val backpack = Regex("Backpack Slot (\\d+)")</ID>
    <ID>ClassOrdering:ItemHighlighter.kt:ItemHighlighter$private val enderchest = Regex("Ender Chest Page (\\d)")</ID>
    <ID>ClassOrdering:ItemModifier.kt:AbstractItemModifier$Companion</ID>
    <ID>ClassOrdering:ItemSelectorEntry.kt:SkyBlockModelEntry$val uuidString = UUID.randomUUID().toString()</ID>
    <ID>ClassOrdering:ItemSource.kt:ItemSource$val type: ItemSources</ID>
    <ID>ClassOrdering:ItemSource.kt:ItemSources.Companion$val craftHelperSources = getMatching(ItemSourceTag.CRAFT_HELPER)</ID>
    <ID>ClassOrdering:ItemSource.kt:ItemSources.Companion$val itemSearchSources = getMatching(ItemSourceTag.ITEM_SEARCH)</ID>
    <ID>ClassOrdering:LenientDispatchedMapCodec.kt:LenientDispatchedMapCodec$Companion : MeowddingLogger</ID>
    <ID>ClassOrdering:MovePatch.kt:MovePatch$Companion</ID>
    <ID>ClassOrdering:MuseumItemSource.kt:MuseumItemContext$override val source = ItemSources.MUSEUM</ID>
    <ID>ClassOrdering:MuseumItemSource.kt:MuseumItemSource$override val type = ItemSources.MUSEUM</ID>
    <ID>ClassOrdering:Octree.kt:Octree$constructor(vararg boxes: BoundingBox) : this(listOf(*boxes))</ID>
    <ID>ClassOrdering:ProfileStorage.kt:ProfileStorage$Companion</ID>
    <ID>ClassOrdering:ProfileStorage.kt:ProfileStorage$private fun isCurrentlyActive()</ID>
    <ID>ClassOrdering:ProfileStorage.kt:ProfileStorage.Companion$inline val defaultPath: Path get() = DataStorage.defaultPath</ID>
    <ID>ClassOrdering:RecipeView.kt:CraftHelperContext$Companion</ID>
    <ID>ClassOrdering:RecipeView.kt:CraftHelperState$Companion</ID>
    <ID>ClassOrdering:RecipeView.kt:WidgetBuilder$Companion</ID>
    <ID>ClassOrdering:RecipeVisitor.kt:RecipeVisitor$Companion</ID>
    <ID>ClassOrdering:RenderUtils.kt:RenderUtils$private val SLOT_HIGHLIGHT_BACK_SPRITE = ResourceLocation.withDefaultNamespace("container/slot_highlight_back")</ID>
    <ID>ClassOrdering:RenderUtils.kt:RenderUtils$private val SLOT_HIGHLIGHT_FRONT_TEXTURE = ResourceLocation.withDefaultNamespace("container/slot_highlight_front")</ID>
    <ID>ClassOrdering:SackData.kt:SackData$val data: List&lt;Sack&gt; = Utils.loadRepoData("sacks", CodecUtils::list)</ID>
    <ID>ClassOrdering:SackOfSacksItemSource.kt:SackOfSacksItemContext$override val source: ItemSources = ItemSources.SACK_OF_SACKS</ID>
    <ID>ClassOrdering:SackOfSacksItemSource.kt:SackOfSacksItemSource$override val type: ItemSources = ItemSources.SACK_OF_SACKS</ID>
    <ID>ClassOrdering:SackValueConfig.kt:SackValueConfig$override fun getTranslationKey(): String</ID>
    <ID>ClassOrdering:SacksItemSource.kt:SacksItemSource$override val type = ItemSources.SACKS</ID>
    <ID>ClassOrdering:SkyblockTagKey.kt:SkyblockTagKey$operator fun contains(value: T): Boolean</ID>
    <ID>ClassOrdering:SkyblockTagKey.kt:SkyblockTagKey$val location: ResourceLocation</ID>
    <ID>ClassOrdering:StorageItemSource.kt:StorageItemSource$override val type = ItemSources.STORAGE</ID>
    <ID>ClassOrdering:StoragePreview.kt:StoragePreview$private var storageInstance: PlayerStorageInstance? = null</ID>
    <ID>ClassOrdering:TrackedItemBundle.kt:BundledItemContext$override val source = ItemSources.BUNDLE</ID>
    <ID>ClassOrdering:VaultItemSource.kt:VaultItemSource$override val type = ItemSources.VAULT</ID>
    <ID>ClassOrdering:WardrobeItemSource.kt:WardrobeItemSource$override val type = ItemSources.WARDROBE</ID>
    <ID>CommentSpacing:CustomItemData.kt:CustomItemDataComponents$//val BLOCKING_ANIMATION: CustomItemComponent&lt;Boolean&gt; = register("block", Codec.BOOL)</ID>
    <ID>CommentSpacing:CustomItemData.kt:CustomItemDataComponents$//val ENCHANTMENT_GLINT_COLOR: CustomItemComponent&lt;Int&gt; = register("glint_color", Codec.INT)</ID>
    <ID>CommentSpacing:ItemCustomizationModal.kt:ItemCustomizationModal$//.withTexture(UIConstants.MODAL_INSET)</ID>
    <ID>CommentSpacing:OctreeDebugRenderer.kt:OctreeDebugRenderer$//)</ID>
    <ID>CommentSpacing:OctreeDebugRenderer.kt:OctreeDebugRenderer$//ShapeRenderer.renderLineBox(</ID>
    <ID>ContextReceiverListWrapping:AnimationManager.kt:AnimationManager.Companion$context(manager: AnimationManager)</ID>
    <ID>ContextReceiverListWrapping:CustomItemsHelper.kt:CustomItemsHelper$context(item: ItemStack)</ID>
    <ID>ContextReceiverListWrapping:DeferredLayout.kt:DeferredLayout$context(_: AnimationManager)</ID>
    <ID>ContextReceiverListWrapping:DeferredLayout.kt:DeferredLayout.Companion$context(onAnimationStart: MutableList&lt;() -&gt; Unit&gt;)</ID>
    <ID>ContextReceiverListWrapping:ItemModifier.kt:ItemModifiers$context(map: MutableMap&lt;DataMarker&lt;*&gt;, Any&gt;, state: State&lt;Boolean&gt;)</ID>
    <ID>ContextReceiverListWrapping:ItemModifier.kt:ItemModifiers$context(map: MutableMap&lt;DataMarker&lt;*&gt;, Any&gt;, state: State&lt;Boolean&gt;, itemStack: ItemStack)</ID>
    <ID>ContextReceiverListWrapping:MuseumDonationHelper.kt:MuseumDonationHelper$context(item: ItemStack)</ID>
    <ID>ContextReceiverListWrapping:Utils.kt:Utils$context(_: ItemStack)</ID>
    <ID>ContextReceiverListWrapping:Utils.kt:Utils$context(original: ItemStack)</ID>
    <ID>ContextReceiverListWrapping:Utils.kt:Utils$context(parent: JsonArray)</ID>
    <ID>ContextReceiverListWrapping:Utils.kt:Utils$context(parent: JsonObject)</ID>
    <ID>ContextReceiverMapping:DeferredLayout.kt:DeferredLayout$context(AnimationManager)</ID>
    <ID>Deprecation:PuzzlerSolver.kt:PuzzlerSolver$LOCATION_BLOCKS</ID>
    <ID>EmptyFunctionBlock:ButtonConfigScreen.kt:ButtonConfigScreen${ }</ID>
    <ID>EmptyFunctionBlock:ButtonConfigScreen.kt:ButtonConfigScreen${}</ID>
    <ID>EnumWrapping:ChatUtils.kt:ComponentIcon</ID>
    <ID>EnumWrapping:ItemSource.kt:ItemSources</ID>
    <ID>EnumWrapping:MinecraftColor.kt:MinecraftColor</ID>
    <ID>Filename:const.kt:me.owdding.skyocean.helpers.const.kt</ID>
    <ID>FunctionExpressionBody:AnimatedSkulls.kt:AnimatedSkulls.AnimatedSkullData${ return textures[(TickEvent.ticks / ticks) % textures.size] }</ID>
    <ID>FunctionExpressionBody:ChatUtils.kt:ChatUtils${ return if (Config.disableMessageTextShadow) { this.withoutShadow() } else { this } }</ID>
    <ID>FunctionExpressionBody:ClientSideInventory.kt:ClientSideInventory.Slot.Companion${ return McPlayer.inventory.mapIndexed { index, itemStack -&gt; val slotX = index % 9 val tempY = (index / 9) - 1 val slotY = if (tempY &lt; 0) tempY + 4 else tempY Slot(slotX * 18, slotY * 18 + (if (tempY &lt; 0) 4 else 0) + rows * 18 + 13, itemStack) } }</ID>
    <ID>FunctionExpressionBody:CompactLevelBarsModifier.kt:CompactLevelBarsModifier${ return McScreen.self?.title?.stripped in list &amp;&amp; item.cleanName.endsWith(" tasks", true) }</ID>
    <ID>FunctionExpressionBody:ConfigExtensions.kt:{ return this.observable(entry) { property.invalidate() } }</ID>
    <ID>FunctionExpressionBody:ConfigUtils.kt:{ return transform( int(value) { slider = true range = 0..100 builder.invoke(this) }, { (it / 255.0).toInt() }, { ((255 / 100.0) * it).roundToInt() }, ) }</ID>
    <ID>FunctionExpressionBody:CraftHelperData.kt:NormalCraftHelperRecipe${ return DefaultTreeResolver.resolve(this, resetLayout, clear) }</ID>
    <ID>FunctionExpressionBody:CraftHelperData.kt:SkyShardsRecipe${ return SkyShardsTreeResolver.resolve(this, resetLayout, clear) }</ID>
    <ID>FunctionExpressionBody:CroesusImpl.kt:CroesusImpl${ return item.`is`(Items.PLAYER_HEAD) &amp;&amp; DungeonChestType.getByNameStartsWith(item.cleanName) in allowedDungeonGamblingChests }</ID>
    <ID>FunctionExpressionBody:CroesusImpl.kt:CroesusImpl${ return screen.title.stripped.let { it.startsWith("The Catacombs - ") || it.startsWith("Master Mode The Catacombs - ") } }</ID>
    <ID>FunctionExpressionBody:CustomItems.kt:CustomItems${ return this.getCustomData()?.let { it[component] } }</ID>
    <ID>FunctionExpressionBody:CustomItemsHelper.kt:CustomItemsHelper${ return getData(itemStack, type) ?: original.call(itemStack, type) }</ID>
    <ID>FunctionExpressionBody:DevUtils.kt:DebugToggle${ return DevUtils.isOn(location) }</ID>
    <ID>FunctionExpressionBody:DevUtils.kt:{ return DebugToggle(SkyOcean.id(path), description) }</ID>
    <ID>FunctionExpressionBody:DrillUpgradeItemSource.kt:DrillUpgradeItemSource${ return items.filter { (itemStack) -&gt; itemStack in SkyblockItemTagKey.DRILLS } .flatMap { item -&gt; val (itemStack) = item listOfNotNull( itemStack.getData(DataTypes.FUEL_TANK), itemStack.getData(DataTypes.ENGINE), itemStack.getData(DataTypes.UPGRADE_MODULE), ).map { SkyBlockId.item(it) } .map { SimpleTrackedItem(it.toItem(), DrillItemContext(item)) } } }</ID>
    <ID>FunctionExpressionBody:DungeonGamblingFakeScreen.kt:DungeonGamblingFakeScreen${ return when (keyEvent.key) { InputConstants.KEY_R -&gt; { setup() true } else -&gt; super.keyPressed(keyEvent) } }</ID>
    <ID>FunctionExpressionBody:DungeonGamblingRenderer.kt:DungeonGamblingRenderer${ return if (t &lt; 0.5) (1 - sqrt(1 - (2 * t).pow(2.0f))) / 2f else (sqrt(1 - (-2 * t + 2).pow(2.0f)) + 1) / 2f }</ID>
    <ID>FunctionExpressionBody:DungeonItems.kt:DungeonItems${ return items[floor]?.get(type) }</ID>
    <ID>FunctionExpressionBody:ExtraDisplays.kt:ExtraDisplays${ return object : Display { override fun getWidth() = display.getWidth() override fun getHeight() = display.getHeight() override fun render(graphics: GuiGraphics) { InventoryRenderer.renderMonoInventory(graphics, 0, 0, display.getWidth(), display.getHeight(), size, orientation, color) display.render(graphics) } } }</ID>
    <ID>FunctionExpressionBody:ExtraWidgetRenderers.kt:ExtraWidgetRenderers${ return WidgetRenderers.text&lt;T&gt;(!component).withColor(color) }</ID>
    <ID>FunctionExpressionBody:ExtraWidgetRenderers.kt:ExtraWidgetRenderers${ return WidgetRenderers.text&lt;T&gt;(component).withColor(color) }</ID>
    <ID>FunctionExpressionBody:GalateaSources.kt:HuntaxeItemSource${ return items.filter { (itemStack) -&gt; itemStack.getSkyBlockId() in SkyblockItemTagKey.HUNT_AXES }.mapNotNull { item -&gt; GalateaItemStorage.data?.huntaxeItem?.let { SimpleTrackedItem(it, HuntaxeItemContext(item)) } } }</ID>
    <ID>FunctionExpressionBody:GalateaSources.kt:ToolkitItemSource${ return items.filter { (itemStack) -&gt; itemStack.getSkyBlockId()?.contains("HUNTING_TOOLKIT", true) == true }.flatMap { item -&gt; GalateaItemStorage.data?.toolkitItems?.map { SimpleTrackedItem(it, ToolkitItemContext(item)) } ?: emptyList() } }</ID>
    <ID>FunctionExpressionBody:GradientNode.kt:GradientNode${ return style.withTextShader(GradientTextShader(provider)) }</ID>
    <ID>FunctionExpressionBody:HotfData.kt:HotfData.HotfPerk${ return costFormula.keval { includeDefault() constant { name = "nextLevel" value = level.toDouble() } }.toInt() }</ID>
    <ID>FunctionExpressionBody:HotmData.kt:HotmData.HotmPerk${ return costFormula.keval { includeDefault() constant { name = "nextLevel" value = level.toDouble() } }.toInt() }</ID>
    <ID>FunctionExpressionBody:Ingredients.kt:Ingredient${ return this.withAmount(this.amount + other.amount) }</ID>
    <ID>FunctionExpressionBody:InvButtons.kt:InvButtons${ return screen is AbstractContainerScreen&lt;*&gt; &amp;&amp; InventoryConfig.inventoryButtons &amp;&amp; (LocationAPI.isOnSkyBlock || screen is ButtonConfigScreen) }</ID>
    <ID>FunctionExpressionBody:IslandChestStorage.kt:IslandChestStorage${ return storage.get() ?: mutableListOf() }</ID>
    <ID>FunctionExpressionBody:ItemKey.kt:UuidKey${ return uuid.hashCode() }</ID>
    <ID>FunctionExpressionBody:ItemSelectorEntry.kt:ModelSearchEntry${ return this.name.stripped.contains(query, true) }</ID>
    <ID>FunctionExpressionBody:ItemValueScreen.kt:ItemValueScreen${ return LayoutWidget(this).also { it.visible = true }.withStretchToContentSize().asScrollable( width, height, { val callback: () -&gt; Unit = { this@asRefreshableScrollable.arrangeElements() val widget = LayoutWidget(this@asRefreshableScrollable).also { it.visible = true }.withStretchToContentSize() this.withSize(width, height) .withContents { contents -&gt; contents.setMinWidth(width - 10) (contents as? FrameLayoutAccessor)?.children()?.clear() contents.addChild(widget, LayoutSettings.defaults().alignHorizontallyCenter().alignVerticallyMiddle()) } } callback.invoke() refreshCallback(callback) }, ) }</ID>
    <ID>FunctionExpressionBody:LayoutUtils.kt:{ return LayoutFactory.horizontal(spacing) { this@asRow.forEach(::widget) } }</ID>
    <ID>FunctionExpressionBody:LayoutUtils.kt:{ return LayoutFactory.vertical(spacing) { this@asColumn.forEach(::widget) } }</ID>
    <ID>FunctionExpressionBody:LayoutUtils.kt:{ return LayoutFactory.vertical(spacing) { this@asWidgetTable.map { LayoutFactory.horizontal(spacing) { it.forEach(::widget) } }.forEach(::widget) } }</ID>
    <ID>FunctionExpressionBody:LenientDispatchedMapCodec.kt:LenientDispatchedMapCodec${ return ops.getMap(input).flatMap { map: MapLike&lt;T&gt; -&gt; val entries = Object2ObjectArrayMap&lt;K, V&gt;() map.entries().forEach { parseEntry(ops, it, entries) } val pair: Pair&lt;Map&lt;K, V&gt;, T&gt; = Pair.of(ImmutableMap.copyOf(entries), input) DataResult.success(pair) } }</ID>
    <ID>FunctionExpressionBody:OceanGradientNode.kt:OceanGradientNode${ return style.withTextShader(gradient) }</ID>
    <ID>FunctionExpressionBody:Octree.kt:Branch${ return "Branch(bb=$boundingBox; nodes={${nodes.mapIndexed { index, b -&gt; "$index=$b" }.joinToString()}})" }</ID>
    <ID>FunctionExpressionBody:Octree.kt:Branch${ return nodes[getIndex(pos)]?.getNode(pos) }</ID>
    <ID>FunctionExpressionBody:Octree.kt:Branch${ return this.boundingBox.xSpan &lt;= 8 }</ID>
    <ID>FunctionExpressionBody:Octree.kt:Leaf${ return "Leaf($leafBox)" }</ID>
    <ID>FunctionExpressionBody:Octree.kt:Octree${ return findLeaf(pos)?.isInside(pos) == true }</ID>
    <ID>FunctionExpressionBody:Octree.kt:Octree${ return root.toString() }</ID>
    <ID>FunctionExpressionBody:OctreeDebugRenderer.kt:OctreeDebugRenderer${ return Mth.frac((multiplier * value.toFloat())) * 0.9f + 0.1f }</ID>
    <ID>FunctionExpressionBody:RecipeVisitor.kt:RecipeVisitor.Companion${ return when (recipe) { is ForgeRecipe -&gt; ForgeRecipeVisitor is CraftingRecipe -&gt; CraftingRecipeVisitor is KatRecipe -&gt; KatRecipeVisitor else -&gt; null } }</ID>
    <ID>FunctionExpressionBody:RodUpgradesItemSource.kt:RodUpgradesItemSource${ return items.filter { (itemStack) -&gt; itemStack.getData(DataTypes.CATEGORY)?.name?.contains("rod", true) == true } .flatMap { item -&gt; val (itemStack) = item listOfNotNull( itemStack.getData(DataTypes.SINKER), itemStack.getData(DataTypes.HOOK), itemStack.getData(DataTypes.LINE), ).map { (_, id) -&gt; SkyBlockId.item(id) } .map { SimpleTrackedItem(it.toItem(), RodUpgradeItemContext(item)) } } }</ID>
    <ID>FunctionExpressionBody:SearchItemFilter.kt:SearchItemFilter${ return item.cleanName.contains(search, ignoreCase = true) &amp;&amp; item.getRawLore().any { it.contains(search, ignoreCase = true) } }</ID>
    <ID>FunctionExpressionBody:SortModes.kt:{ return comparator.reversed() }</ID>
    <ID>FunctionExpressionBody:StorageItemSource.kt:{ return this.flatMap { (index, stacks) -&gt; val context = function(index + 1) stacks.map { stack -&gt; SimpleTrackedItem(stack, context) } } }</ID>
    <ID>FunctionExpressionBody:Utils.kt:Utils${ return (this * 2).roundToInt() / 2.0 }</ID>
    <ID>FunctionExpressionBody:Utils.kt:Utils${ return loadFromRepo&lt;JsonElement&gt;(file).toDataOrThrow(SkyOceanCodecs.getCodec&lt;T&gt;().let(modifier)) }</ID>
    <ID>FunctionExpressionBody:Utils.kt:Utils${ return loadFromRepo&lt;JsonElement&gt;(file).toDataOrThrow(codec) }</ID>
    <ID>FunctionExpressionBody:Utils.kt:Utils${ return loadFromRepo&lt;JsonElement&gt;(file).toDataOrThrow(supplier()) }</ID>
    <ID>FunctionExpressionBody:Utils.kt:Utils${ return loadRepoData&lt;T, T&gt;(file) { it } }</ID>
    <ID>FunctionExpressionBody:Utils.kt:Utils${ return this.firstOrNull(predicate) ?: this.last() }</ID>
    <ID>FunctionExpressionBody:Utils.kt:Utils${ return this.mapNotNull { val value = transform(it) if (value == null) { nullConsumer(it) } value } }</ID>
    <ID>FunctionExpressionBody:Utils.kt:Utils${ return value ?: default }</ID>
    <ID>FunctionExpressionBody:Utils.kt:Utils${ return value ?: default() }</ID>
    <ID>FunctionNaming:EntityHelper.kt:EntityAccessor$fun `ocean$getNameTagScale`(): Float</ID>
    <ID>FunctionNaming:EntityHelper.kt:EntityAccessor$fun `ocean$glowTime`(time: Long)</ID>
    <ID>FunctionNaming:EntityHelper.kt:EntityAccessor$fun `ocean$setGlowingColor`(color: Int)</ID>
    <ID>FunctionNaming:EntityHelper.kt:EntityAccessor$fun `ocean$setGlowing`(glowing: Boolean)</ID>
    <ID>FunctionNaming:EntityHelper.kt:EntityAccessor$fun `ocean$setNameTagScale`(scale: Float)</ID>
    <ID>FunctionNaming:EntityHelper.kt:EntityRenderStateAccessor$fun `ocean$getNameTagScale`(): Float</ID>
    <ID>FunctionNaming:EntityHelper.kt:EntityRenderStateAccessor$fun `ocean$setNameTagScale`(scale: Float)</ID>
    <ID>FunctionNaming:NpcRecipeParser.kt:NpcRecipeParser$@Subscription @OnlyOnSkyBlock private fun ScreenMouseClickEvent.Pre()</ID>
    <ID>IfElseBracing:AnimationManager.kt:AnimationManager$if (percentage &lt;= delta) { entries.forEach { it() } true } else false</ID>
    <ID>IfElseBracing:ChestItemSource.kt:ChestItemContext$if (SkyBlockIsland.PRIVATE_ISLAND.inIsland()) "Click to highlight chest!" else { if (MiscConfig.itemSearchWarpToIsland) "Click to warp to island and highlight chest!" else "Go to your island to highlight!" }</ID>
    <ID>IfElseBracing:DungeonGambling.kt:DungeonGambling$if (DungeonsConfig.gamblingInCroesus) { event.item.getRawLore().firstOrNull { it.startsWith("To ") }?.let { line -&gt; CroesusImpl.croesusLoreToFloor[line.substring(3)] } ?: return } else return</ID>
    <ID>IfElseBracing:MetalDetectorSolver.kt:MetalDetectorSolver$if (isNotEmpty()) { retainAll(candidates) if (size == 1) foundPosition(first().getBlockPos()) } else addAll(candidates)</ID>
    <ID>IfElseBracing:MineshaftAnnouncement.kt:MineshaftAnnouncement$if (PartyAPI.inParty) { ChatUtils.chat("Sending message into party chat...") McClient.sendCommand("/pc ${text.stripped}") } else ChatUtils.chat(text)</ID>
    <ID>IfElseBracing:ProfileInChat.kt:ProfileInChat$if (name.equals(McPlayer.name, true)) { event.component.siblings.indexOfFirst { sibling -&gt; sibling.style.hoverEvent == null } } else index</ID>
    <ID>IfElseBracing:RecipeView.kt:WidgetBuilder$if (CraftHelperConfig.parentAmount) { state.amountThroughParents } else 0</ID>
    <ID>ImplicitDefaultLocale:BobberTime.kt:BobberTime$"%.2f".format(time)</ID>
    <ID>ImportOrdering:DrillUpgradeItemSource.kt:import tech.thatgravyboat.skyblockapi.api.remote.api.SkyBlockId import me.owdding.skyocean.features.item.sources.system.ParentItemContext import me.owdding.skyocean.features.item.sources.system.SimpleTrackedItem import me.owdding.skyocean.utils.tags.SkyblockItemTagKey import net.minecraft.network.chat.Component import tech.thatgravyboat.skyblockapi.api.datatype.DataTypes import tech.thatgravyboat.skyblockapi.api.datatype.getData import tech.thatgravyboat.skyblockapi.utils.text.TextColor import tech.thatgravyboat.skyblockapi.utils.text.TextStyle.color</ID>
    <ID>ImportOrdering:DungeonGambling.kt:import com.mojang.blaze3d.platform.InputConstants import me.owdding.ktmodules.Module import me.owdding.lib.utils.type.EnumArgumentType import tech.thatgravyboat.skyblockapi.api.remote.api.SkyBlockId.Companion.getSkyBlockId import me.owdding.skyocean.config.features.dungeons.DungeonsConfig import me.owdding.skyocean.events.RegisterSkyOceanCommandEvent import me.owdding.skyocean.features.dungeons.gambling.chest.DungeonChestType import me.owdding.skyocean.utils.Utils.containerItems import me.owdding.skyocean.utils.Utils.getArgument import net.minecraft.client.gui.screens.inventory.ContainerScreen import net.minecraft.world.item.Items import tech.thatgravyboat.skyblockapi.api.area.dungeon.DungeonAPI import tech.thatgravyboat.skyblockapi.api.area.dungeon.DungeonFloor import tech.thatgravyboat.skyblockapi.api.events.base.CancellableSkyBlockEvent import tech.thatgravyboat.skyblockapi.api.events.base.Subscription import tech.thatgravyboat.skyblockapi.api.events.render.RenderScreenBackgroundEvent import tech.thatgravyboat.skyblockapi.api.events.screen.* import tech.thatgravyboat.skyblockapi.api.item.calculator.getItemValue import tech.thatgravyboat.skyblockapi.helpers.McClient import tech.thatgravyboat.skyblockapi.utils.extentions.contains import tech.thatgravyboat.skyblockapi.utils.extentions.getRawLore import tech.thatgravyboat.skyblockapi.utils.regex.RegexUtils.findGroup import tech.thatgravyboat.skyblockapi.utils.text.TextProperties.stripped</ID>
    <ID>ImportOrdering:ItemModel.kt:import me.owdding.ktcodecs.GenerateCodec import me.owdding.ktcodecs.GenerateDispatchCodec import me.owdding.skyocean.features.item.custom.ui.standard.search.ItemModelSearchEntry import me.owdding.skyocean.features.item.custom.ui.standard.search.ModelSearchEntry import me.owdding.skyocean.features.item.custom.ui.standard.search.SkyBlockModelEntry import me.owdding.skyocean.generated.DispatchHelper import net.minecraft.core.registries.BuiltInRegistries import net.minecraft.resources.ResourceLocation import tech.thatgravyboat.skyblockapi.api.remote.api.SkyBlockId import net.minecraft.world.item.Item import kotlin.reflect.KClass</ID>
    <ID>InjectDispatcher:ItemHighlighter.kt:ItemHighlighter$Default</ID>
    <ID>LongMethod:CraftHelperDisplay.kt:CraftHelperDisplay$private fun visualize(tree: ContextAwareRecipeTree, output: ItemLikeIngredient, callback: () -&gt; ((save: Boolean) -&gt; Unit)): AbstractWidget</ID>
    <ID>LongMethod:CustomizeCommand.kt:CustomizeCommand$@Subscription fun onCommand(event: RegisterSkyOceanCommandEvent)</ID>
    <ID>LongMethod:ItemCustomizationModal.kt:ItemCustomizationModal$override fun init()</ID>
    <ID>LongMethod:ItemSearchScreen.kt:ItemSearchScreen$override fun init()</ID>
    <ID>LongMethod:SourceToWidget.kt:SourceToWidget$fun CalculationEntry.asWidget(callback: () -&gt; Unit): LayoutElement</ID>
    <ID>MapGetWithNotNullAssertionOperator:AnimationManager.kt:AnimationManager$nextStates[key]!!</ID>
    <ID>MemberNameEqualsClassName:Buttons.kt:Buttons$val buttons get() = arrayOf( button0, button1, button2, button3, button4, button5, button6, button7, button8, button9, button10, button11, button12, button13, )</ID>
    <ID>MissingUseCall:CraftHelperCommand.kt:CraftHelperCommand$inputStream()</ID>
    <ID>MissingUseCall:Utils.kt:Utils$loadFromResourcesAsStream(path)</ID>
    <ID>ModifierListSpacing:AnimationManager.kt:AnimationManager.Companion$context(manager: AnimationManager)</ID>
    <ID>ModifierListSpacing:CustomItemsHelper.kt:CustomItemsHelper$context(item: ItemStack)</ID>
    <ID>ModifierListSpacing:DeferredLayout.kt:DeferredLayout$context(_: AnimationManager)</ID>
    <ID>ModifierListSpacing:DeferredLayout.kt:DeferredLayout.Companion$context(onAnimationStart: MutableList&lt;() -&gt; Unit&gt;)</ID>
    <ID>ModifierListSpacing:ItemModifier.kt:ItemModifiers$context(map: MutableMap&lt;DataMarker&lt;*&gt;, Any&gt;, state: State&lt;Boolean&gt;) private</ID>
    <ID>ModifierListSpacing:ItemModifier.kt:ItemModifiers$private context(map: MutableMap&lt;DataMarker&lt;*&gt;, Any&gt;, state: State&lt;Boolean&gt;, itemStack: ItemStack)</ID>
    <ID>ModifierListSpacing:MuseumDonationHelper.kt:MuseumDonationHelper$private context(item: ItemStack)</ID>
    <ID>ModifierListSpacing:Utils.kt:Utils$@Suppress("SpacingAroundColon") context(original: ItemStack) inline</ID>
    <ID>ModifierListSpacing:Utils.kt:Utils$context(_: ItemStack)</ID>
    <ID>ModifierListSpacing:Utils.kt:Utils$context(_: ItemStack) inline</ID>
    <ID>ModifierListSpacing:Utils.kt:Utils$context(parent: JsonArray)</ID>
    <ID>ModifierListSpacing:Utils.kt:Utils$context(parent: JsonObject)</ID>
    <ID>ModifierOrdering:ItemModifier.kt:ItemModifiers$private context(map: MutableMap&lt;DataMarker&lt;*&gt;, Any&gt;, state: State&lt;Boolean&gt;, itemStack: ItemStack)</ID>
    <ID>ModifierOrdering:MuseumDonationHelper.kt:MuseumDonationHelper$private context(item: ItemStack)</ID>
    <ID>NamedArguments:AreaWalls.kt:AreaWalls$renderPlane(Direction.DOWN, box.minX(), box.minZ(), box.maxX() + 1, box.maxZ() + 1, box.maxY() + 1, colorValue)</ID>
    <ID>NamedArguments:AreaWalls.kt:AreaWalls$renderPlane(Direction.DOWN, box.minX(), box.minZ(), box.maxX() + 1, box.maxZ() + 1, box.minY(), colorValue)</ID>
    <ID>NamedArguments:AreaWalls.kt:AreaWalls$renderPlane(Direction.EAST, box.minY(), box.minZ(), box.maxY() + 1, box.maxZ() + 1, box.maxX() + 1, colorValue)</ID>
    <ID>NamedArguments:AreaWalls.kt:AreaWalls$renderPlane(Direction.EAST, box.minY(), box.minZ(), box.maxY() + 1, box.maxZ() + 1, box.minX(), colorValue)</ID>
    <ID>NamedArguments:AreaWalls.kt:AreaWalls$renderPlane(Direction.NORTH, box.minX(), box.minY(), box.maxX() + 1, box.maxY() + 1, box.maxZ() + 1, colorValue)</ID>
    <ID>NamedArguments:AreaWalls.kt:AreaWalls$renderPlane(Direction.NORTH, box.minX(), box.minY(), box.maxX() + 1, box.maxY() + 1, box.minZ(), colorValue)</ID>
    <ID>NamedArguments:AreaWalls.kt:AreaWalls$renderPlane(Direction.SOUTH, box.minX(), box.minY(), box.maxX() + 1, box.maxY() + 1, box.maxZ() + 1, colorValue)</ID>
    <ID>NamedArguments:AreaWalls.kt:AreaWalls$renderPlane(Direction.SOUTH, box.minX(), box.minY(), box.maxX() + 1, box.maxY() + 1, box.minZ(), colorValue)</ID>
    <ID>NamedArguments:AreaWalls.kt:AreaWalls$renderPlane(Direction.UP, box.minX(), box.minZ(), box.maxX() + 1, box.maxZ() + 1, box.maxY() + 1, colorValue)</ID>
    <ID>NamedArguments:AreaWalls.kt:AreaWalls$renderPlane(Direction.UP, box.minX(), box.minZ(), box.maxX() + 1, box.maxZ() + 1, box.minY(), colorValue)</ID>
    <ID>NamedArguments:AreaWalls.kt:AreaWalls$renderPlane(Direction.UP, box.minX(), box.minZ(), box.maxX(), box.maxZ(), box.maxY() + 1, color.value)</ID>
    <ID>NamedArguments:AreaWalls.kt:AreaWalls$renderPlane(Direction.WEST, box.minY(), box.minZ(), box.maxY() + 1, box.maxZ() + 1, box.maxX() + 1, colorValue)</ID>
    <ID>NamedArguments:AreaWalls.kt:AreaWalls$renderPlane(Direction.WEST, box.minY(), box.minZ(), box.maxY() + 1, box.maxZ() + 1, box.minX(), colorValue)</ID>
    <ID>NamedArguments:ClientSideInventory.kt:ClientSideInventory$drawTexture( TEXTURE, textureX, textureY, width = backgroundWidth, height = this.rows * 18 + 17, u1 = backgroundWidth / 256f, v1 = (this.rows * 18f + 17f) / 256f, )</ID>
    <ID>NamedArguments:ClientSideInventory.kt:ClientSideInventory$drawTexture( TEXTURE, x = textureX, y = textureY + this.rows * 18 + 17, width = backgroundWidth, height = 96, u0 = 0f, u1 = backgroundWidth / 256f, v0 = 125f / 256f, v1 = backgroundHeight / 256f, )</ID>
    <ID>NamedArguments:ContextAwareRecipeTree.kt:StandardRecipeNode$RecipeNode(recipe, craftsRequired, requiredAmount, totalRequired, carriedOver, it, context)</ID>
    <ID>NamedArguments:DungeonCard.kt:DungeonCard$drawGradient(0, 0, WIDTH, HEIGHT - 1, BACKGROUND_COLOR, ARGB.color(0x60, color), ARGB.color(0x60, color), BACKGROUND_COLOR)</ID>
    <ID>NamedArguments:DungeonCard.kt:DungeonCard$drawGradient(0, HEIGHT - 1, WIDTH, 1, color, color, color, color)</ID>
    <ID>NamedArguments:DungeonGamblingRenderer.kt:DungeonGamblingRenderer$drawGradient( graphics.guiWidth() / 2 - 1, (graphics.guiHeight() + FULL_CARD_HEIGHT) / 2, 2, (DungeonCard.HEIGHT * ITEM_SCALE * 0.25).toInt(), 0xFFFF5555.toInt(), 0xFFFF5555.toInt(), 0xFFFF5555.toInt(), 0xFFFF5555.toInt(), )</ID>
    <ID>NamedArguments:ExtraDisplays.kt:ExtraDisplays.&lt;no name provided&gt;$renderMonoInventory(graphics, 0, 0, display.getWidth(), display.getHeight(), size, orientation, color)</ID>
    <ID>NamedArguments:ExtraDisplays.kt:ExtraDisplays.&lt;no name provided&gt;$renderNormalInventory(graphics, 0, 0, display.getWidth(), display.getHeight(), columns, rows, color)</ID>
    <ID>NamedArguments:InvButtons.kt:InvButtons$InvButton(button, x, y == 1, screen, x + y * 7, posX, posY, 26, buttonHeight)</ID>
    <ID>NamedArguments:RecipeView.kt:CraftHelperState.Companion$CraftHelperState( entries.first().ingredient, entries.first().itemTracker, entries.first().ingredient.serializeWithAmount(), entries.first().recipeType, entries.sumOf { it.recipeOutputAmount }, entries.flatMap { it.usedItems }.toMutableList(), entries.all { it.childrenDone }, entries.all { it.canSupercraft }, false, entries.sumOf { it.required }, entries.sumOf { it.amount }, entries.sumOf { it.amountThroughParents }, entries.sumOf { it.amountCarryOver }, false, entries.all { it.hasBeenInitialized }, null, )</ID>
    <ID>NamedArguments:RenderUtils.kt:RenderUtils$renderPlane(direction, startX.toFloat(), startY.toFloat(), endX.toFloat(), endY.toFloat(), z.toFloat(), color)</ID>
    <ID>NoBlankLineInList:ClientSideInventory.kt:ClientSideInventory$ </ID>
    <ID>NoBlankLineInList:ItemCustomizationModal.kt:ItemCustomizationModal$ </ID>
    <ID>NoMultipleSpaces:GemstoneBlocks.kt:GemstoneBlocks$ </ID>
    <ID>NoSemicolons:ItemCustomizationModal.kt:DyeTab.GRADIENT$;</ID>
    <ID>NoSemicolons:ItemSource.kt:ItemSourceTag.CRAFT_HELPER$;</ID>
    <ID>NoTrailingSpaces:CrystalHollowBlocks.kt:CrystalHollowBlocks$ </ID>
    <ID>NoTrailingSpaces:DwarvenMinesBB.kt:DwarvenMinesBB$ </ID>
    <ID>NoTrailingSpaces:GemstoneBlocks.kt:GemstoneBlocks$ </ID>
    <ID>ParameterListWrapping:AnimationManager.kt:AnimationManager.State$( val x: Int, val y: Int, val width: Int, val height: Int, )</ID>
    <ID>PrintStackTrace:ProfileStorage.kt:ProfileStorage$e</ID>
    <ID>ReturnCount:VisitorModifier.kt:VisitorModifier$override fun applies(event: InventoryChangeEvent): SkyOceanItemIngredient?</ID>
    <ID>TrailingCommaOnCallSite:DungeonItems.kt:DungeonItems$( SkyOceanCodecs.getCodec&lt;DungeonChestType&gt;(), SkyOceanCodecs.getCodec&lt;DungeonItem&gt;().listOf().xmap(::DungeonChestItems, DungeonChestItems::items) )</ID>
    <ID>TrailingCommaOnCallSite:DungeonItems.kt:DungeonItems$( SkyOceanCodecs.getCodec&lt;DungeonFloor&gt;(), Codec.unboundedMap( SkyOceanCodecs.getCodec&lt;DungeonChestType&gt;(), SkyOceanCodecs.getCodec&lt;DungeonItem&gt;().listOf().xmap(::DungeonChestItems, DungeonChestItems::items) ) )</ID>
    <ID>TrailingCommaOnCallSite:FishingConfig.kt:FishingConfig$( boolean(false) { this.translation = "skyocean.config.fishing.lava_replacement" } )</ID>
    <ID>TrailingCommaOnCallSite:HighlightBoss.kt:HighlightBoss$( SlayerType.INFERNO_DEMONLORD to TextColor.GOLD, SlayerType.VOIDGLOOM_SERAPH to TextColor.DARK_PURPLE, SlayerType.RIFTSTALKER_BLOODFIEND to TextColor.DARK_AQUA, SlayerType.TARANTULA_BROODFATHER to TextColor.DARK_RED, SlayerType.SVEN_PACKMASTER to TextColor.BLUE, SlayerType.REVENANT_HORROR to TextColor.DARK_GREEN )</ID>
    <ID>TrailingCommaOnCallSite:HotspotFeatures.kt:HotspotFeatures$( text { append(ChatUtils.ICON_SPACE_COMPONENT) append("Hotspot despawned!", OceanColors.WARNING) }, stayTime = 3f, fadeOutTime = 0.5f )</ID>
    <ID>TrailingCommaOnCallSite:MineshaftAnnouncement.kt:MineshaftAnnouncement$( "Mineshaft Entered | ", MineshaftAPI.mineshaftType?.toFormattedName() ?: "Unknown", if (MineshaftAPI.isCrystal) " Crystal" else null, " | ", MineshaftAPI.corpses.groupBy { it.type }.toSortedMap(CorpseType::compareTo).map { (type, corpses) -&gt; "${corpses.size}${type.name.first()}" }.joinToString(", ") )</ID>
    <ID>TrailingCommaOnCallSite:PestWarning.kt:PestWarning$( Blocks.RED_MUSHROOM, Blocks.BROWN_MUSHROOM, Blocks.CARROTS, Blocks.POTATOES, Blocks.WHEAT, Blocks.COCOA, Blocks.CARVED_PUMPKIN, Blocks.PUMPKIN, Blocks.MELON, Blocks.SUGAR_CANE, Blocks.CACTUS, Blocks.NETHER_WART )</ID>
    <ID>TrailingCommaOnDeclarationSite:AreaWalls.kt:AreaWalls$Area</ID>
    <ID>TrailingCommaOnDeclarationSite:Buttons.kt:ButtonConfig$( private val itemName: String, private val commandName: String, @Language("RegExp") private val titleName: String, private val tooltipName: String = "" )</ID>
    <ID>TrailingCommaOnDeclarationSite:CraftHelperData.kt:CraftHelperRecipeType : DispatchHelper</ID>
    <ID>TrailingCommaOnDeclarationSite:CraftHelperData.kt:SkyShardsMethodType : DispatchHelper</ID>
    <ID>TrailingCommaOnDeclarationSite:ItemColor.kt:ItemColorType : DispatchHelper</ID>
    <ID>TrailingCommaOnDeclarationSite:ItemKey.kt:ItemKeyType : DispatchHelper</ID>
    <ID>TrailingCommaOnDeclarationSite:ItemModel.kt:ItemModelType : DispatchHelper</ID>
    <ID>TrailingCommaOnDeclarationSite:ItemTagKey.kt:ItemTagKey : ItemTagKey</ID>
    <ID>TrailingCommaOnDeclarationSite:MinecraftColor.kt:MinecraftColor</ID>
    <ID>TrailingCommaOnDeclarationSite:PowderType.kt:PowderType</ID>
    <ID>TrailingCommaOnDeclarationSite:SackValueConfig.kt:SackValueConfig$PriceSource : Translatable</ID>
    <ID>TrailingCommaOnDeclarationSite:SkyblockItemTagKey.kt:SkyblockItemTagKey : BaseSkyblockItemTagKey</ID>
    <ID>TrailingCommaOnDeclarationSite:Utils.kt:SkyOceanModifyIndicator : Translatable</ID>
    <ID>UnnecessaryApply:FolderStorage.kt:FolderStorage$apply { save() }</ID>
    <ID>UnnecessaryBracesAroundTrailingLambda:CustomizeCommand.kt:CustomizeCommand$remove</ID>
    <ID>UnsafeCallOnNullableType:AnimatedSkulls.kt:AnimatedSkulls$Utils.loadFromRepo&lt;JsonElement&gt;("skulls")!!</ID>
    <ID>UnsafeCallOnNullableType:AnimationManager.kt:AnimationManager$nextStates[key]!!</ID>
    <ID>UnsafeCallOnNullableType:ButtonConfigScreen.kt:ButtonConfigScreen$selectedButton!!</ID>
    <ID>UnsafeCallOnNullableType:CalcCommand.kt:CalcCommand$getArgument&lt;Int&gt;("maxLevel")!!</ID>
    <ID>UnsafeCallOnNullableType:CalcCommand.kt:CalcCommand$getArgument&lt;String&gt;("expression")!!</ID>
    <ID>UnsafeCallOnNullableType:CalcCommand.kt:CalcCommand$this.getArgument&lt;String&gt;("expression")!!</ID>
    <ID>UnsafeCallOnNullableType:ChestTracker.kt:ChestTracker$this.first!!</ID>
    <ID>UnsafeCallOnNullableType:ClientSideInventory.kt:ClientSideInventory$McPlayer.self!!</ID>
    <ID>UnsafeCallOnNullableType:CustomItems.kt:CustomItems$this.getSkyBlockId()!!</ID>
    <ID>UnsafeCallOnNullableType:CustomItems.kt:CustomItems$this.getTag("skyocean:static_item")!!</ID>
    <ID>UnsafeCallOnNullableType:CustomItems.kt:CustomItems$this[DataTypes.TIMESTAMP]!!</ID>
    <ID>UnsafeCallOnNullableType:CustomItems.kt:CustomItems$this[DataTypes.UUID]!!</ID>
    <ID>UnsafeCallOnNullableType:CustomizeCommand.kt:CustomizeCommand$getArgument&lt;Boolean&gt;("state")!!</ID>
    <ID>UnsafeCallOnNullableType:CustomizeCommand.kt:CustomizeCommand$getArgument&lt;Int&gt;("hex_color")!!</ID>
    <ID>UnsafeCallOnNullableType:CustomizeCommand.kt:CustomizeCommand$getArgument&lt;Int&gt;("time")!!</ID>
    <ID>UnsafeCallOnNullableType:CustomizeCommand.kt:CustomizeCommand$getArgument&lt;ResourceKey&lt;TrimMaterial&gt;&gt;("material")!!</ID>
    <ID>UnsafeCallOnNullableType:CustomizeCommand.kt:CustomizeCommand$getArgument&lt;ResourceKey&lt;TrimPattern&gt;&gt;("pattern")!!</ID>
    <ID>UnsafeCallOnNullableType:CustomizeCommand.kt:CustomizeCommand$getArgument&lt;ResourceLocation&gt;("vanilla_model")!!</ID>
    <ID>UnsafeCallOnNullableType:CustomizeCommand.kt:CustomizeCommand$getArgument&lt;SkyBlockId&gt;("animated_color")!!</ID>
    <ID>UnsafeCallOnNullableType:CustomizeCommand.kt:CustomizeCommand$getArgument&lt;SkyBlockId&gt;("animated_skull")!!</ID>
    <ID>UnsafeCallOnNullableType:CustomizeCommand.kt:CustomizeCommand$getArgument&lt;SkyBlockId&gt;("skyblock_model")!!</ID>
    <ID>UnsafeCallOnNullableType:CustomizeCommand.kt:CustomizeCommand$getArgument&lt;SkyBlockId&gt;("static_color")!!</ID>
    <ID>UnsafeCallOnNullableType:CustomizeCommand.kt:CustomizeCommand$getArgument&lt;String&gt;("name")!!</ID>
    <ID>UnsafeCallOnNullableType:DungeonGambling.kt:DungeonGambling$getArgument&lt;DungeonChestType&gt;("chest")!!</ID>
    <ID>UnsafeCallOnNullableType:DungeonGambling.kt:DungeonGambling$getArgument&lt;DungeonFloor&gt;("floor")!!</ID>
    <ID>UnsafeCallOnNullableType:DyeData.kt:DyeData$Utils.loadFromRepo&lt;JsonElement&gt;("dyes")!!</ID>
    <ID>UnsafeCallOnNullableType:DyeData.kt:DyeData$animatedDyes[id]!!</ID>
    <ID>UnsafeCallOnNullableType:HotspotAPI.kt:HotspotAPI$entry.pos!!</ID>
    <ID>UnsafeCallOnNullableType:ItemColor.kt:SkyBlockDye$DyeData.staticDyes[id]!!</ID>
    <ID>UnsafeCallOnNullableType:ItemCustomizationModal.kt:ItemCustomizationModal$animationManager!!</ID>
    <ID>UnsafeCallOnNullableType:ItemCustomizationModal.kt:ItemCustomizationModal$copiedItem.getKey()!!</ID>
    <ID>UnsafeCallOnNullableType:ItemCustomizationModal.kt:ItemCustomizationModal$it.color!!</ID>
    <ID>UnsafeCallOnNullableType:ItemCustomizationModal.kt:ItemCustomizationModal$item.getOrTryCreateCustomData()!!</ID>
    <ID>UnsafeCallOnNullableType:ItemCustomizationModal.kt:ItemCustomizationModal$this.layout!!</ID>
    <ID>UnsafeCallOnNullableType:ResourcePackUtils.kt:PackMetadata$overlays!!</ID>
    <ID>UnsafeCallOnNullableType:SimpleRecipeApi.kt:SimpleRecipeApi$merge(key, ingredient) { a, b -&gt; a + b }!!</ID>
    <ID>UnsafeCallOnNullableType:SourceToWidget.kt:SourceToWidget$conversionCost!!</ID>
    <ID>UnsafeCallOnNullableType:TagComponentSerialization.kt:TagComponentSerialization$color!!</ID>
    <ID>UnsafeCast:ButtonConfigScreen.kt:ButtonConfigScreen$this as AbstractRecipeBookScreenAccessor</ID>
    <ID>UnusedParameter:BlockRetexture.kt:BlockRetexture$parent: ResourceLocation? = null</ID>
    <ID>UnusedParameter:IngredientParser.kt:IngredientParser$regex: Regex</ID>
    <ID>UnusedParameter:OctreeDebugRenderer.kt:OctreeDebugRenderer$depth: Int</ID>
    <ID>UnusedParameter:OctreeDebugRenderer.kt:OctreeDebugRenderer$nodesRendered: MutableInt</ID>
    <ID>UnusedParameter:OctreeDebugRenderer.kt:OctreeDebugRenderer$playerNode: Leaf?</ID>
    <ID>UnusedVariable:OctreeDebugRenderer.kt:OctreeDebugRenderer$val camX = event.cameraPosition.x</ID>
    <ID>UnusedVariable:OctreeDebugRenderer.kt:OctreeDebugRenderer$val camY = event.cameraPosition.y</ID>
    <ID>UnusedVariable:OctreeDebugRenderer.kt:OctreeDebugRenderer$val camZ = event.cameraPosition.z</ID>
    <ID>UnusedVariable:OctreeDebugRenderer.kt:OctreeDebugRenderer$val colorValue = color + 5L</ID>
    <ID>UnusedVariable:OctreeDebugRenderer.kt:OctreeDebugRenderer$val vertexConsumer: VertexConsumer = event.buffer.getBuffer(RenderType.lines())</ID>
    <ID>UseRequire:ItemColor.kt:AnimatedSkyBlockDye$throw IllegalArgumentException("Unknown animated dye $id")</ID>
    <ID>UseRequire:ItemColor.kt:SkyBlockDye$throw IllegalArgumentException("Unknown dye $id")</ID>
    <ID>VarCouldBeVal:AnimationManager.kt:AnimationManager$private var applyImmediately: MutableList&lt;AbstractWidget&gt; = mutableListOf()</ID>
    <ID>VarCouldBeVal:DungeonGamblingRenderer.kt:DungeonGamblingRenderer$private var items = mutableListOf&lt;ItemStack&gt;()</ID>
    <ID>VariableNaming:DeferredLayout.kt:DeferredLayout$protected abstract val _backing: Type</ID>
    <ID>Wrapping:ItemContext.kt:ItemContext$(</ID>
    <ID>Wrapping:SkyOceanScreen.kt:SkyOceanScreen$(</ID>
  </CurrentIssues>
</SmellBaseline>
