<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>AlsoCouldBeApply:AttributeApi.kt$AttributeApi$also</ID>
    <ID>AlsoCouldBeApply:CraftHelperDisplay.kt$CraftHelperDisplay$also</ID>
    <ID>ArgumentListWrapping:HotspotHighlighter.kt$HotspotHighlighter$( pos.x.toFloat(), pos.y.toFloat(), pos.z.toFloat(), radius.toFloat(), 0.1f, ARGB.color(HotspotHighlightConfig.outlineTransparency, type.color.value), )</ID>
    <ID>ArgumentListWrapping:HotspotHighlighter.kt$HotspotHighlighter$( pos.x.toFloat(), pos.y.toFloat(), pos.z.toFloat(), radius.toFloat(), ARGB.color(HotspotHighlightConfig.surfaceTransparency, type.color.value), )</ID>
    <ID>ArgumentListWrapping:InvButton.kt$InvButton$( sprite, this.x, this.y, baseWidth, baseHeight, -1, )</ID>
    <ID>ArgumentListWrapping:ItemValueScreen.kt$ItemValueScreen$( width, height, { val callback: () -&gt; Unit = { this@asRefreshableScrollable.arrangeElements() val widget = LayoutWidget(this@asRefreshableScrollable).also { it.visible = true }.withStretchToContentSize() this.withSize(width, height) .withContents { contents -&gt; contents.setMinWidth(width - 10) (contents as? FrameLayoutAccessor)?.children()?.clear() contents.addChild(widget, LayoutSettings.defaults().alignHorizontallyCenter().alignVerticallyMiddle()) } } callback.invoke() refreshCallback(callback) }, )</ID>
    <ID>ArgumentListWrapping:SackValue.kt$SackValue$( it.width + 10, screen.containerHeight - 10 - title.height, { this.withScroll(oldList?.xScroll ?: 0, oldList?.yScroll ?: 0) oldList = this }, )</ID>
    <ID>ClassOrdering:AccessoryBagItemSource.kt$AccessoryBagItemContext$override val source = ItemSources.ACCESSORY_BAG</ID>
    <ID>ClassOrdering:AccessoryBagItemSource.kt$AccessoryBagItemSource$override val type = ItemSources.ACCESSORY_BAG</ID>
    <ID>ClassOrdering:BlockTagKey.kt$BlockTagKey$override val key: TagKey&lt;Block&gt; = TagKey.create(Registries.BLOCK, SkyOcean.id(path))</ID>
    <ID>ClassOrdering:Buttons.kt$ButtonConfig$constructor(itemLike: ItemLike, command: String, @Language("RegExp") title: String, tooltip: String = "") : this(itemLike.id.toString(), command, title, tooltip)</ID>
    <ID>ClassOrdering:ChestItemSource.kt$ChestItemSource$override val type = ItemSources.CHEST</ID>
    <ID>ClassOrdering:ChestTracker.kt$ChestTracker$private val Slot.savableIndex get() = this.index % 27</ID>
    <ID>ClassOrdering:CodecHelpers.kt$CodecHelpers$fun &lt;T&gt; copyOnWriteList(original: Codec&lt;T&gt;): Codec&lt;CopyOnWriteArrayList&lt;T&gt;&gt;</ID>
    <ID>ClassOrdering:CompoundPatch.kt$CompoundPatch$Companion</ID>
    <ID>ClassOrdering:ConfigPatches.kt$ConfigPatches$init { register(MovePatch.ID, MovePatch.CODEC) register(CompoundPatch.ID, CompoundPatch.CODEC) }</ID>
    <ID>ClassOrdering:CraftHelperStorage.kt$CraftHelperStorage$val data get() = storage.get()</ID>
    <ID>ClassOrdering:CrystalHollowsBB.kt$CrystalHollowsBB$private fun create(pos1: Vec3i, pos2: Vec3i): BoundingBox</ID>
    <ID>ClassOrdering:DataStorage.kt$DataStorage$Companion</ID>
    <ID>ClassOrdering:DataStorage.kt$DataStorage$constructor(defaultData: () -&gt; T, fileName: String, codec: Codec&lt;T&gt;) : this(0, defaultData, fileName, { codec })</ID>
    <ID>ClassOrdering:DataStorage.kt$DataStorage$fun get(): T</ID>
    <ID>ClassOrdering:DataStorage.kt$DataStorage$fun save()</ID>
    <ID>ClassOrdering:DataStorage.kt$DataStorage.Companion$val defaultPath: Path = McClient.config.resolve("skyocean/data")</ID>
    <ID>ClassOrdering:DwarvenMinesBB.kt$DwarvenMinesBB$private fun create(pos1: Vec3i, pos2: Vec3i): BoundingBox</ID>
    <ID>ClassOrdering:ForgeItemSource.kt$ForgeItemSource$override val type = ItemSources.FORGE</ID>
    <ID>ClassOrdering:Ingredients.kt$CurrencyIngredient$override fun withAmount(amount: Int): Ingredient</ID>
    <ID>ClassOrdering:Ingredients.kt$IngredientType.Companion$@IncludedCodec val ITEM_LIKE: Codec&lt;ItemLikeIngredient&gt; = SkyOceanCodecs.IngredientCodec.codec().xmap({ it as ItemLikeIngredient }, { it })</ID>
    <ID>ClassOrdering:InventoryItemSource.kt$InventoryItemSource$override val type = ItemSources.INVENTORY</ID>
    <ID>ClassOrdering:InventoryRenderer.kt$InventoryRenderer$actual fun renderMonoInventory(graphics: GuiGraphics, x: Int, y: Int, width: Int, height: Int, size: Int, orientation: Orientation, color: Int)</ID>
    <ID>ClassOrdering:InventoryRenderer.kt$InventoryRenderer$private fun drawTexture( graphics: GuiGraphics, x: Int, y: Int, width: Int, height: Int, color: Int = -1, texture: GpuTexture )</ID>
    <ID>ClassOrdering:InventoryRenderer.kt$InventoryRenderer$private inline fun cacheShaderToTexture( name: String, pipeline: RenderPipeline, property: KMutableProperty0&lt;GpuTexture?&gt;, width: Int, height: Int, color: Int, setup: RenderPass.() -&gt; Unit )</ID>
    <ID>ClassOrdering:ItemContext.kt$ItemContext$val source: ItemSources</ID>
    <ID>ClassOrdering:ItemHighlighter.kt$ItemHighlighter$private val backpack = Regex("Backpack Slot (\\d+)")</ID>
    <ID>ClassOrdering:ItemHighlighter.kt$ItemHighlighter$private val enderchest = Regex("Ender Chest Page (\\d)")</ID>
    <ID>ClassOrdering:ItemSource.kt$ItemSource$val type: ItemSources</ID>
    <ID>ClassOrdering:ItemTracker.kt$ItemTracker$constructor(vararg sources: ItemSources) : this(sources.toList())</ID>
    <ID>ClassOrdering:LayoutUtils.kt$SkyOceanScreen$private val zeroDelay = (-1).seconds.toJavaDuration()</ID>
    <ID>ClassOrdering:MovePatch.kt$MovePatch$Companion</ID>
    <ID>ClassOrdering:MuseumItemSource.kt$MuseumItemContext$override val source = ItemSources.MUSEUM</ID>
    <ID>ClassOrdering:MuseumItemSource.kt$MuseumItemSource$override val type = ItemSources.MUSEUM</ID>
    <ID>ClassOrdering:Octree.kt$Octree$constructor(vararg boxes: BoundingBox) : this(listOf(*boxes))</ID>
    <ID>ClassOrdering:ProfileStorage.kt$ProfileStorage$Companion</ID>
    <ID>ClassOrdering:ProfileStorage.kt$ProfileStorage$private fun isCurrentlyActive()</ID>
    <ID>ClassOrdering:ProfileStorage.kt$ProfileStorage.Companion$inline val defaultPath: Path get() = DataStorage.defaultPath</ID>
    <ID>ClassOrdering:RecipeView.kt$CraftHelperContext$Companion</ID>
    <ID>ClassOrdering:RecipeVisitor.kt$RecipeVisitor$Companion</ID>
    <ID>ClassOrdering:RenderUtils.kt$RenderUtils$private val SLOT_HIGHLIGHT_BACK_SPRITE = ResourceLocation.withDefaultNamespace("container/slot_highlight_back")</ID>
    <ID>ClassOrdering:RenderUtils.kt$RenderUtils$private val SLOT_HIGHLIGHT_FRONT_TEXTURE = ResourceLocation.withDefaultNamespace("container/slot_highlight_front")</ID>
    <ID>ClassOrdering:SackData.kt$SackData$val data: List&lt;Sack&gt; = Utils.loadRepoData("sacks", CodecUtils::list)</ID>
    <ID>ClassOrdering:SackValueConfig.kt$SackValueConfig$override fun getTranslationKey(): String</ID>
    <ID>ClassOrdering:SacksItemSource.kt$SacksItemSource$override val type = ItemSources.SACKS</ID>
    <ID>ClassOrdering:SkyOceanItemId.kt$SkyOceanItemId$Companion</ID>
    <ID>ClassOrdering:SkyOceanItemId.kt$SkyOceanItemId.Companion$@IncludedCodec val CODEC: Codec&lt;SkyOceanItemId&gt; = Codec.STRING.xmap(::SkyOceanItemId, SkyOceanItemId::id)</ID>
    <ID>ClassOrdering:SkyblockTagKey.kt$SkyblockTagKey$operator fun contains(value: T): Boolean</ID>
    <ID>ClassOrdering:SkyblockTagKey.kt$SkyblockTagKey$val location: ResourceLocation</ID>
    <ID>ClassOrdering:StorageItemSource.kt$StorageItemSource$override val type = ItemSources.STORAGE</ID>
    <ID>ClassOrdering:StoragePreview.kt$StoragePreview$private var storageInstance: PlayerStorageInstance? = null</ID>
    <ID>ClassOrdering:TrackedItemBundle.kt$BundledItemContext$override val source = ItemSources.BUNDLE</ID>
    <ID>ClassOrdering:Utils.kt$Utils$private val validChars = listOf(' ', '_', '-', ':')</ID>
    <ID>ClassOrdering:Utils.kt$Utils$val ItemLike.id get() = BuiltInRegistries.ITEM.getKey(this.asItem())</ID>
    <ID>ClassOrdering:VaultItemSource.kt$VaultItemSource$override val type = ItemSources.VAULT</ID>
    <ID>ClassOrdering:WardrobeItemSource.kt$WardrobeItemSource$override val type = ItemSources.WARDROBE</ID>
    <ID>ClassOrdering:pip.kt$MonoInventoryPipState$override val shrinkToScissor: Boolean = false</ID>
    <ID>ClassOrdering:pip.kt$PolyInventoryPipState$override val shrinkToScissor: Boolean = false</ID>
    <ID>ClassOrdering:uniforms.kt$MonoInventoryUniform$Companion</ID>
    <ID>ClassOrdering:uniforms.kt$PolyInventoryUniform$Companion</ID>
    <ID>CyclomaticComplexMethod:HotfHelper.kt$HotfHelper$@Subscription @OnlyOnSkyBlock fun onInventoryUpdate(event: InventoryChangeEvent)</ID>
    <ID>CyclomaticComplexMethod:HotmHelper.kt$HotmHelper$@Subscription @OnlyOnSkyBlock fun onInventoryUpdate(event: InventoryChangeEvent)</ID>
    <ID>CyclomaticComplexMethod:SourceToWidget.kt$SourceToWidget$fun CalculationEntry.asWidget(callback: () -&gt; Unit): LayoutElement</ID>
    <ID>CyclomaticComplexMethod:TreeFormatter.kt$TreeFormatter$fun append(state: CraftHelperState, widget: WidgetBuilder, widgetConsumer: (AbstractWidget) -&gt; Unit, depth: Int = 0, prefix: String = "")</ID>
    <ID>EmptyFunctionBlock:ButtonConfigScreen.kt$ButtonConfigScreen${ }</ID>
    <ID>EmptyFunctionBlock:ButtonConfigScreen.kt$ButtonConfigScreen${}</ID>
    <ID>EmptyFunctionBlock:ModelGen.kt$ModelGen${ }</ID>
    <ID>EnumWrapping:ItemSource.kt$ItemSources</ID>
    <ID>EnumWrapping:MinecraftColor.kt$MinecraftColor</ID>
    <ID>ExplicitItLambdaParameter:SkyblockTagKey.kt$SkyblockTagKey.Companion${ it -&gt; val file = it.readAsJson().toData(SkyOceanCodecs.SkyblockTagFileCodec.codec()) ?: run { SkyOcean.error("Failed to load tag file $path") return@flatMap emptyList&lt;String&gt;() } file.values }</ID>
    <ID>ExplicitItLambdaParameter:Utils.kt$Utils${ it -&gt; val value = transform(it) if (value == null) { nullConsumer(it) } value }</ID>
    <ID>Filename:const.kt$me.owdding.skyocean.helpers.const.kt</ID>
    <ID>Filename:pip.kt$me.owdding.skyocean.utils.rendering.pip.kt</ID>
    <ID>Filename:uniforms.kt$me.owdding.skyocean.utils.rendering.uniforms.kt</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityAccessor$fun `ocean$getNameTagScale`(): Float</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityAccessor$fun `ocean$glowTime`(time: Long)</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityAccessor$fun `ocean$setGlowingColor`(color: Int)</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityAccessor$fun `ocean$setGlowing`(glowing: Boolean)</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityAccessor$fun `ocean$setNameTagScale`(scale: Float)</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityRenderStateAccessor$fun `ocean$getNameTagScale`(): Float</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityRenderStateAccessor$fun `ocean$setNameTagScale`(scale: Float)</ID>
    <ID>FunctionNaming:NpcRecipeParser.kt$NpcRecipeParser$@Subscription @OnlyOnSkyBlock private fun ScreenMouseClickEvent.Pre()</ID>
    <ID>FunctionNaming:Utils.kt$Utils$fun ItemBuilder(item: ItemLike, init: ItemBuilder.() -&gt; Unit)</ID>
    <ID>FunctionStartOfBodySpacing:BlockRetexture.kt$BlockRetexture$fun RegisterFakeBlocksEvent.registerMultiple(vararg defaultBlocks: Block, id: String, condition: Condition = ::defaultCondition)</ID>
    <ID>ImportOrdering:GlassPaneFactory.kt$import me.owdding.skyocean.datagen.models.BlockModelFactory import me.owdding.skyocean.datagen.models.ModelGenContext import net.minecraft.client.data.models.BlockModelGenerators import net.minecraft.client.data.models.BlockModelGenerators.Y_ROT_270 import net.minecraft.client.data.models.BlockModelGenerators.Y_ROT_90 import net.minecraft.client.data.models.blockstates.MultiPartGenerator import net.minecraft.client.data.models.model.ModelTemplates import net.minecraft.client.data.models.model.TextureMapping import net.minecraft.resources.ResourceLocation import net.minecraft.world.level.block.Block import net.minecraft.world.level.block.Blocks import net.minecraft.world.level.block.StainedGlassPaneBlock import net.minecraft.world.level.block.state.properties.BlockStateProperties</ID>
    <ID>LongMethod:CraftHelperDisplay.kt$CraftHelperDisplay$private fun visualize(tree: ContextAwareRecipeTree, output: ItemLikeIngredient, callback: () -&gt; ((save: Boolean) -&gt; Unit)): AbstractWidget</ID>
    <ID>LongMethod:ItemSearchScreen.kt$ItemSearchScreen$override fun init()</ID>
    <ID>LongMethod:SourceToWidget.kt$SourceToWidget$fun CalculationEntry.asWidget(callback: () -&gt; Unit): LayoutElement</ID>
    <ID>LongMethod:TreeFormatter.kt$TreeFormatter$fun append(state: CraftHelperState, widget: WidgetBuilder, widgetConsumer: (AbstractWidget) -&gt; Unit, depth: Int = 0, prefix: String = "")</ID>
    <ID>MatchingDeclarationName:LayoutUtils.kt$SkyOceanScreen : BaseCursorScreen</ID>
    <ID>MaxLineLength:HotfHelper.kt$HotfHelper$if (!ForagingConfig.hotfDisplayTotalLeft &amp;&amp; ForagingConfig.hotfDisplayShiftCost &amp;&amp; !ForagingConfig.hotfTotalProgress &amp;&amp; !ForagingConfig.hotfStackSize) return</ID>
    <ID>MemberNameEqualsClassName:Buttons.kt$Buttons$val buttons get() = arrayOf( button0, button1, button2, button3, button4, button5, button6, button7, button8, button9, button10, button11, button12, button13, )</ID>
    <ID>MemberNameEqualsClassName:FakeBlocks.kt$FakeBlocks$val fakeBlocks = mutableMapOf&lt;Block, MutableList&lt;FakeBlockEntry&gt;&gt;()</ID>
    <ID>NoSemicolons:Ingredients.kt$CurrencyType.CHOCOLATE$;</ID>
    <ID>NoSemicolons:RecipeType.kt$RecipeType.UNKNOWN$;</ID>
    <ID>NoSemicolons:SortModes.kt$AdditionalSortModes.PRICE$;</ID>
    <ID>NoUnusedImports:InvButton.kt$me.owdding.skyocean.features.inventory.buttons.InvButton.kt</ID>
    <ID>NoUnusedImports:ProfileStorage.kt$me.owdding.skyocean.utils.storage.ProfileStorage.kt</ID>
    <ID>ParameterListWrapping:InventoryRenderer.kt$InventoryRenderer$( graphics: GuiGraphics, x: Int, y: Int, width: Int, height: Int, color: Int = -1, texture: GpuTexture )</ID>
    <ID>ParameterListWrapping:InventoryRenderer.kt$InventoryRenderer$( name: String, pipeline: RenderPipeline, property: KMutableProperty0&lt;GpuTexture?&gt;, width: Int, height: Int, color: Int, setup: RenderPass.() -&gt; Unit )</ID>
    <ID>ParameterListWrapping:pip.kt$MonoInventoryPipState$( override val x0: Int, override val y0: Int, override val x1: Int, override val y1: Int, override val scissorArea: ScreenRectangle?, override val pose: Matrix3x2f, val size: Int, val color: Int, val vertical: Boolean, )</ID>
    <ID>ParameterListWrapping:pip.kt$PolyInventoryPipState$( override val x0: Int, override val y0: Int, override val x1: Int, override val y1: Int, override val scissorArea: ScreenRectangle?, override val pose: Matrix3x2f, val size: Vector2i, val color: Int, )</ID>
    <ID>PrintStackTrace:DataStorage.kt$DataStorage$e</ID>
    <ID>PrintStackTrace:ProfileStorage.kt$ProfileStorage$e</ID>
    <ID>ReturnCount:SkyOceanItemId.kt$SkyOceanItemId.Companion$fun unknownType(input: String): SkyOceanItemId?</ID>
    <ID>SpacingAroundColon:ChatConfig.kt$ChatConfig$:</ID>
    <ID>SpacingAroundColon:FakeBlockModel.kt$FakeBlockModel$:</ID>
    <ID>SpacingAroundColon:InventoryRenderer.kt$InventoryRenderer$:</ID>
    <ID>SpacingAroundColon:SlayerConfig.kt$SlayerConfig$:</ID>
    <ID>SpacingAroundCurly:BlockRetexture.kt$BlockRetexture${</ID>
    <ID>SpacingAroundOperators:BlazeSlayerHighlight.kt$BlazeSlayerHighlight$?:</ID>
    <ID>SpacingAroundOperators:MinibossHighlight.kt$MinibossHighlight$?:</ID>
    <ID>SpreadOperator:CombinedSuggestionProvider.kt$CombinedSuggestionProvider$(*futures.toTypedArray())</ID>
    <ID>SpreadOperator:Octree.kt$Octree$(*boxes)</ID>
    <ID>StringTemplate:Octree.kt$Leaf$${leafBox}</ID>
    <ID>UnusedParameter:IngredientParser.kt$IngredientParser$regex: Regex</ID>
    <ID>UnusedParameter:OctreeDebugRenderer.kt$OctreeDebugRenderer$depth: Int</ID>
    <ID>UnusedParameter:OctreeDebugRenderer.kt$OctreeDebugRenderer$nodesRendered: MutableInt</ID>
    <ID>Wrapping:ClientSideInventory.kt$ClientSideInventory$(</ID>
    <ID>Wrapping:FakeBlockStateDefinition.kt$FakeBlockStateDefinition.Companion$it.group( MapCodec.assumeMapUnsafe(BlockModelDefinition.CODEC).forGetter(FakeBlockStateDefinition::model), EnumCodec.of(BlendMode::class.java).optionalFieldOf("blend").forGetter(CodecExtras.optionalFor(FakeBlockStateDefinition::blend)) ).apply(it) { model, mode -&gt; FakeBlockStateDefinition(model, mode.getOrNull()) }</ID>
  </CurrentIssues>
</SmellBaseline>
